[
  {
    "title": "Vue Typed Js",
    "ID": "718941a6-01ae-4695-96f7-99a51b0f7c24",
    "description": "How to use vue typed js",
    "content": "[![npm](https://img.shields.io/npm/v/vue-typed-js.svg) ![npm](https://img.shields.io/npm/dm/vue-typed-js.svg)](https://www.npmjs.com/package/vue-typed-js)\n[![vue2](https://img.shields.io/badge/vue-2.x-brightgreen.svg)](https://vuejs.org/)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8789841c45264d19ad2595061437a8a9)](https://www.codacy.com/app/orlando.wenzinger/vue-typed-js?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Orlandster1998/vue-typed-js&amp;utm_campaign=Badge_Grade)\n\nA Vue.js integration for Typed.js.\n\nTyped.js is a library that types. Enter in any string, and watch it type at the speed you've set, backspace what it's typed, and begin a new sentence for however many strings you've set.\n\nCheckout the offical project [here](https://github.com/mattboldt/typed.js/).\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#examples)\n\n# Installation\n\n```\nnpm install --save vue-typed-js\n```\n\n## Default import\n\nInstall the component:\n\n```javascript\nimport Vue from 'vue'\nimport VueTypedJs from 'vue-typed-js'\n\nVue.use(VueTypedJs)\n```\n\n**⚠️ A css file is included when importing the package. You may have to setup your bundler to embed the css in your page.**\n\n## Browser import\n\n```html\n<link rel=\"stylesheet\" href=\"vue-typed-js/dist/vue-typed-js.css\"/>\n\n<script src=\"vue.js\"></script>\n<script src=\"vue-typed-js/dist/vue-typed-js.browser.js\"></script>\n```\n\nThe plugin should be auto-installed. If not, you can install it manually with the instructions below.\n\nInstall all the components:\n\n```javascript\nVue.use(VueTypedJs)\n```\n\n# Usage\nTo get started simply add the `vue-typed-js` custom element to your `template` and pass the text, which should be typed to the `strings` property. In addition you need to pass an element with the class `typing` to the slot, which will be used as a `wrapper`.\n\nMinimal setup:\n\n```html\n<vue-typed-js :strings=\"['First text', 'Second Text']\">\n  <h1 class=\"typing\"></h1>\n</vue-typed-js>\n```\n\nThe `typing` class also allows you to just animate certain parts of a string:\n```html\n<vue-typed-js :strings=\"['John', 'James']\">\n  <h1>Hey <span class=\"typing\"></span></h1>\n</vue-typed-js>\n```\n\n## Properties\nYou can make use of the following properties in order to customize your typing expirience:\n\n| Property             | Type    | Description                                                          | Usage                                                           |\n|----------------------|---------|----------------------------------------------------------------------|-----------------------------------------------------------------|\n| strings              | Array   | strings to be typed                                                  | `:strings=\"['Text 1', 'Text 2']\"` |\n| stringsElement       | String  | ID of element containing string children                             | `:stringsElement=\"'myId'\"`                                                                |\n| typeSpeed            | Number  | type speed in milliseconds                                           | `:typeSpeed=\"50\"`                                                                |\n| startDelay           | Number  | time before typing starts in milliseconds                            | `:startDelay=\"1000\"`                                                                |\n| backSpeed            | Number  | backspacing speed in milliseconds                                    | `:backSpeed=\"10\"`                                                                |\n| smartBackspace       | Boolean | only backspace what doesn't match the previous string                | `:smartBackspace=\"true\"`                                                                |\n| shuffle              | Boolean | shuffle the strings                                                  | `:shuffle=\"true\"`                                                                |\n| backDelay            | Number  | time before backspacing in milliseconds                              | `:backDelay=\"100\"`                                                                |\n| fadeOut              | Boolean | Fade out instead of backspace                                        | `:fadeOut=\"true\"`                                                                |\n| fadeOutClass         | String  | css class for fade animation                                         | `:fadeOutClass=\"'fadeOutClass'\"`                                                                |\n| fadeOutDelay         | Number | fade out delay in milliseconds                                       | `:fadeOutDelay=\"500\"`                                                                |\n| loop                 | Boolean | loop strings                                                         | `:loop=\"true\"`                                                                |\n| loopCount            | Number  | amount of loops                                                      | `:loopCount=\"3\"`                                                                |\n| showCursor           | Boolean | show cursor                                                          | `:showCursor=\"true\"`                                                                |\n| cursorChar           | String  | character for cursor                                                 | `:cursorChar=\"'_'\"`                                                                |\n| autoInsertCss        | Boolean | insert CSS for cursor and fadeOut into HTML                          | `:autoInsertCss=\"true\"`                                                                |\n| attr                 | String  | attribute for typing Ex: input placeholder, value, or just HTML text | `:attr=\"'placeholder'\"`                                                                |\n| bindInputFocusEvents | Boolean | bind to focus and blur if el is text input                           | `:bindInputFocusEvents=\"true\"`                                                                |\n| contentType          | String  | 'html' or 'null' for plaintext                                       | `:contentType=\"'html'\"`                                                                |\n\n## Events\nYou can listen to the following events:\n\n| Event                  | Description                                                          | Usage                                                           |\n|------------------------|----------------------------------------------------------------------|-----------------------------------------------------------------|\n| onComplete             | All typing is complete                                               | `@onComplete=\"doSmth()\"` |\n| preStringTyped         | Before each string is typed                                          | `@preStringTyped=\"doSmth()\"`                                                                |\n| onStringTyped          | After each string is typed                                           | `@onStringTyped=\"doSmth()\"`                                                                |\n| onLastStringBackspaced | During looping, after last string is typed                           | `@onLastStringBackspaced=\"doSmth()\"`                                                                |\n| onTypingPaused         | Typing has been stopped                                              | `@onTypingPaused=\"doSmth()\"`                                                                |\n| onTypingResumed        | Typing has been started after being stopped                          | `@onTypingResumed=\"doSmth()\"`                                                                |\n| onReset                | After reset                                                          | `@onReset=\"doSmth()\"`                                                                |\n| onStop                 | After stop                                                           | `@onStop=\"doSmth()\"`                                                                |\n| onStart                | After start                                                          | `@onStart=\"doSmth()\"`                                                                |\n| onDestroy              | After destroy                                                        | `@onDestroy=\"doSmth()\"`                                                                |\n## Features\nCheckout features like `type pausing`, `smart backspacing` etc. on the libraries [page](https://github.com/mattboldt/typed.js/).\n\n# Examples\nHere are several examples:\n\n```html\n<!-- infinite loop -->\n<vue-typed-js :strings=\"['awesome', 'brilliant']\" :loop=\"true\" @onComplete=\"doSmth()\">\n  <h2>We are a <span class=\"typing\"></span> company!</h2>\n</vue-typed-js>\n\n<!-- type pausing -->\n<vue-typed-js :strings=\"['This is text ^1000 which gets paused for 1 second', 'wow, interesting']\">\n  <h2 class=\"typing\"></h2>\n</vue-typed-js>\n\n<!-- output html -->\n<vue-typed-js :strings=\"['<p>Paragraph</p>', '<span>Span</span>']\" :contentType=\"'html'\">\n  <h2 class=\"typing\"></h2>\n</vue-typed-js>\n```\n\n---\n\n# License\n\n[MIT](http://opensource.org/licenses/MIT)",
    "categories": [
      "software"
    ],
    "slug": "vue-typed-js",
    "tags": [
      "typedjs",
      "vue"
    ],
    "date": "2022-06-06 12:00",
    "cover": "cover3.jpg",
    "createdAt": 1654467130449
  }
]
[
  {
    "tags": [
      "cisco",
      "first-step-to-switch"
    ],
    "description": "Cisco switch cihazlarına yapılandırmaya başlamak için switch ve IOS'u tanıyalım.",
    "title": "Cisco Switch'e ilk Adım",
    "content": "Tüm ağ cihazlarının her birinde birer işletim sistemi olmak zorundadır. Cisco Switch cihazlarında ise IOS işletim sistemi vardır. (Apple IOS ile karıştırmayın :-))\n\nBu makalemizde ise bu temel kullanım için bu IOS işletim sistemini nasıl configüre edebiliriz onu anlatacağım.\n\nÖncelikle Cisco Swicth cihazlarında herhangi bir GUI yok bu nedenle çoğu kişinin sevmediği ama biz network ve siber güvenlik ile uğraşan kişilerin sevdiği ve çokça aşina olduğu CLI ekranını kullanacağız \n\n## IOS CLI'a İlk Adımlar\n\nCisco IOS yazılımı bir güvenlik özelliği olarak, yönetim erişimini aşağıdaki gibi iki komut moduna ayırır:\n\n<span style=\"color:green\">User EXEC Mode (Kullanıcı EXEC Modu)</span>\n\n- Bu mod sadece kısıtlı sayıda temel monitoring (izleme) komutlarına izin verir.\n- Genellikle <em>yalnızca görüntüleme modu</em veya <em>enable mode</em> olarak adlandırılır.\n- Cihaz yapılandırmasına herhangi bir değişiklik yapılmasına izil verilmez.\n- CLI'da <code>SwitchAdı></code> ile gösterilir. \n\n\n<span style=\"color:green\">Privileged EXEC Mode (Ayrıcalıklı Exec Modu)</span>\n\n- Bu modda iken kullanıcı herhangi bir izleme komutunu kullanabilir, cihaza ait yapılandırma ve yönetim komutlarını yürütebilir.\n- Global Config modu gibi daha yüksek yapılandırma modlarına sadece bu moddan giriş yapılabilir.\n- CLI'da <code>SwitchAdı#</code> ile gösterilir. \n\n## Global Yapılandırma Modu ve Alt Yapılandırma Modları\n\nCisco switchlerini yapılandırmak için kullanıcının global yapılandırma modu olarak adlandırılan, global config moduna girmesi gerekir.\n\nGlobal yapılandırma modunda, cihazın bir bütün olarak çalışmasını etkileyen CLI yapılandırma değişiklikleri yapılır. Global yapılandırma modu, <code>Switch(config)#</code> gibi cihaz adından sonra biten bir <em>(config)#</em> istemiyle tanımlanır.\n\nGlobal Config moduna, diğer belirli yapılandırma modlarından önce erişilir. Kullanıcı global Config modundan farklı alt yapılandırma modlarına girebilir. Bu modların her biri, switchin belirli bir bölümünün veya işlevinin yapılandırılması için kullanılır. Alt yapılandırma modlarına iki örnek aşağıdaki gibidir.\n\n- **Line Config Mode** ⇒ Konsol, SSH, Telnet veya AUX erişimini yapılandırmak için kullanılır.\n- **Interface Config Mode** ⇒ Switch portunu veya Router ağ arayüzünü yapılandırmak için kullanılır.\n\nCLI kullanırken hangi modda olduğumuzu o moda ait komut istemi aracılığı ile öğreniriz. Varsayılan olarak her komut istemi cihazın adı ile başlar, daha sonra ise hangi modda olduğunu belirten ifade yer alır. Örneğin;\n\n- Global Config Mode ⇒ <code>SwitchAdı(config)#</code>\n- Line Config Mode ⇒ <code>SwitchAdı(config-line)#</code>\n- Interface Config Mode ⇒ <code>SwitchAdı(config-if)#</code>\n\n## Switch Modları Arasında Gezinelim\n\nSwicth modlarına girip çıkmak için özel komutlar kullanılır. User EXEC modundan Privileged EXEC moduna geçmek için <code>enable</code>komutu kullanılır. Kullanıcı EXEC moduna geri dönmek için ise Privileged EXEC modundayken <code>disable</code> komutunu kullanılır.\n\nGlobal Config moduna girmek için Privileged EXEC modundayken <code>configure terminal</code> modunu kullanılır. Global Config moddan Privileged EXEC moduna geri dönmek için ie <code>exit</code> komutu kullanılır.\n\nBirçok farklı alt yapılandırma modu vardır. Örneğin, Line Config moduna girmek için <code>line</code> komutu ve ardından erişmek istediğiniz yönetim line türünü ve numarasını kullanılır. Alt yapılandırma modundan çıkmak ve global yapılandırma moduna dönmek için exit komutu kullanılır.\n\n```\nSwitch(config)# line console 0\nSwitch(config-line)# exit\nSwitch(config)#\n```\n\nHerhangi bir alt yapılandırma modundan, modlar hiyerarşisine göre bi üst moda geçmek için <code>exit</code> komutu dışında <code>end</code> komutu ve Ctrl+Z tuş kombinasyonu kullanılabilir.\n\nAyrıca bir alt yapılandırma modundan diğerine doğrudan da geçebiliriz. Bir arayüzü seçtikten sonra komut isteminin değiştiğine dikkat edelim\n\n```\nSwitch(config-line)# interface FastEthernet 0/1\nSwitch(config-if)#\n```\n\n### Swicth modlarını daha hızlı değiştirelim\n\nSürekli configüre terminal gibi uzun mod değiştirme komutlarını kullanmak bazen can sıkıcı olabilir. Aşağıda sık kullanılan mod değiştirme komutlarının kısaltılmış verisyonlarını görebilirsiniz.\n|Komut|Kısa hali\n|-|-|\n|enable|en|\n|configure terminal|conf t|\n|interface FastEthernet 0/1| int fa0/1|\n|...|...|\nİlerleyen makalelerde daha fazla komut göreceğiz merak etmeyin :)\n\n\n",
    "categories": [
      "Switch & Router"
    ],
    "slug": "cisco-switch-e-ilk-adım",
    "ID": "1c86164b-7c68-4f8c-a9ab-c95ce427086b",
    "cover": "cover2.jpg",
    "date": "2022-06-08 12:00",
    "createdAt": 1654719373157,
    "updatedAt": 1654728512525
  },
  {
    "tags": [
      "cisco",
      "switch",
      "switch-config"
    ],
    "description": "Temel switch yapılandırmalarını yapalım.",
    "title": "Temel Switch Yapılandırması",
    "content": "## Switch Adını Değiştirelim\n\nBir switch yapılandırmaya başlarken ilk işimiz switch adını değiştirmek olmalıdır. Varsayılan olarak Cisco tarafından cihazlara <em>Switch</em> adı atanır. Sorun da tam olarak burada başlar. Bir ağda isim atanmamış tüm switchlerin adı aynı olduğunda uzaktan SSH ya da Telnet ile bağlanılan switchin hangi switch olduğunu anlamak karmaşık hale gelebilir.\n\nVarsayılan isim, daha açıklayıcı bir isimle değiştirilmelidir. İsimler akıllıca seçildiğinde, ağ cihazlarını hatırlamak, belgelemek ve tanımlamak daha kolay olacaktır. Hostlar için bazı önemli isimlendirme yönergeleri şunlardır:\n\n- Harf ile başlamalı\n- Boşluk içermemeli\n- Harf veya sayı ile bitmeli\n- Sadece harf, sayı ve tireler kullanılmalı\n- Uzunluğu 64 karakterden az olmalı\n\nAşağıda örnek bir switch adlandırması görmekteyiz. \n\n![örnek-switch-adlandırması](https://skorskyfiles.blob.core.windows.net/$web/articles/temel-switch-yapilandirmasi/ornek-adlandirma.png)\n\nİsimlendirmeler bu şekilde tanımlayıcı olduğu takdirde ilerleyen aşamalarda işimiz çok daha kolay hale gelecektir.\n\nBir switchin adını değiştirmek için global config modda iken <code>hostname</code> komutunun ardından verilmek istenen ismin girilmesi yeterlidir.\n\n```\nSwitch# configure terminal\nSwitch(config)# hostname Sw-Floor-1\nSw-Floor-1(config)#\n```\n\n## Switch Modlarını Şifreleyelim\nBir cihaza ilk defa bağlandığımızda User EXEC modundayız demektir. Örnekte gösterildiği gibi <code>line console 0</code> komutunu kullanarak konsol yapılandırma moduna geçiş yapıyoruz. 0 olarak bahsettiğimiz ilk ve genelde tek olan cihaz üzerindeki konsol girişini ifade eder. \n\nBu moda girdikten sonra <code>password</code> komutunu kullandıktan sonra vermek istediğimiz şifreyi girebiliriz. Son olarak <code>login</code> komutunu kullanarak User Exec modunu aktifleştirmemiz gerekiyor.\n\n```\nSw-Floor-1# configure terminal\nSw-Floor-1(config)# line console 0\nSw-Floor-1(config-line)# password skorskyblog\nSw-Floor-1(config-line)# login\nSw-Floor-1(config-line)# end\nSw-Floor-1#\n```\n\nArtık cihaz üzerinde bulunan konsol hattını şifreledik ancak cihaz üzerinde daha fazla yetkiye sahip olduğumuz Privileged modu da şifrelememiz güvenlik açısından elzem bir durumdur. Şimdi sıra privileged modda;\n\nPrivileged moda geçtikten sonra <code>enable secret</code> komutunun ardından istediğimiz şifreyi girebiliriz. \n```\nSw-Floor-1# configure terminal\nSw-Floor-1(config)# enable secret skorsky\nSw-Floor-1(config)# exit\nSw-Floor-1#\n```\n\nHenüz işimiz bitmedi şimdi sıra Cisco Switchlerde bulunan SSH ve Telnet gibi uzaktan bağlantı yapmamıza olanak sunan sanal vty hatlarını şirelemekte. Çoğu Cisco cihazında 0-15 aralığında numaralandırılmış 16 adet sanal vty hattı yer alır.\n\nBu sanal hatları şifrelemek için global config modda iken <code>line vty 0 15</code> komutunu kullanarak vty config moda geçiş yapıyoruz. Daha sonra <code>password</code> komutunun ardından istediğimiz şifreyi verebiliriz. Hemen ardından <code>login</code>\nkomutunu kullanarak vty erişimini etkinleştiriyoruz.\n\n```\nSw-Floor-1# configure terminal\nSw-Floor-1(config)# line vty 0 15\nSw-Floor-1(config-line)# password skorsky-line\nSw-Floor-1(config-line)# login \nSw-Floor-1(config-line)# end\nSw-Floor-1#\n```\n\nBuraya kadar her şey çok güzel ancak cihaz üzerinde çalışan yapılandırma dosyasında varsayılan olarak verilen parolalar açık olarak yer almaktadır bu da üst düzey bir güvenlik açığı yaratmaktadır. Aşağıda encrypte edilmemiş yapılandırma dosyasını görmektesiniz. \n![şifresiz config](https://skorskyfiles.blob.core.windows.net/$web/articles/temel-switch-yapilandirmasi/sifresiz-config.png)\n\nGörüldüğü üzere girilen tüm parolalar açıkça görülebilir halde şimdi bu parolaları encrypte edelim.\n\nGlobal config moda girdikten sonra <code>service password-encryption</code> komutunu girdiğimiz zaman cihazda yer alan parolalar artık encrypte edilmiş hale gelir.\n\n```\nSw-Floor-1# configure terminal\nSw-Floor-1(config)# service password-encryption\nSw-Floor-1(config)#\n```\n\nCihazda çalışan yapılandırmayı görmek için <code>show running-config</code> ya da daha kısa hali olan <code>sh run</code> komutunu girdikten sonra enter tuşu ile biraz alt satırlara indiğimizde aşağıdaki gibi bir ekran ile karşılaşacağız. \n```\nSw-Floor-1(config)# end\nSw-Floor-1# show running-config\n```\n![encrypte password](https://skorskyfiles.blob.core.windows.net/$web/articles/temel-switch-yapilandirmasi/sifreli-config.png)\n\nArtık şifrelerde encrypte olmuş halde. Durmak yok ilerlemeye devam. \n\n## Banner Mesajları Gösterelim\n![banner](https://skorskyfiles.blob.core.windows.net/$web/articles/temel-switch-yapilandirmasi/banner.png)\n\nCisco cihazına ilk eriştiğimizde yukarıdaki gibi bir banner mesajı verseydik güzel olmaz mıydı? Evet ben de aynı şekilde düşündüm. Hadi bir banner mesajı verelim.\n\nÖncelikle global config moda geçtikten sonra <code>banner motd</code> komutundan sonra banner mesajı içerisinde yer almayacak özel bir karakteri ayraç olarak kullanarak mesajımızı giriyoruz. Daha anlaşılır olması için örnek verelim.\n```\nSw-Floor-1# configure terminal\nSw-Floor-1(config)# banner motd !Authorized Access Only!\n```\n\n## Yapılandırmayı Kaydedelim\nSwitch üzerinde çeşitli değişiklikler yaptık çok güzel, fakat elektrik bağlantısı kesilirse ya da switch kapatılıp açılırsa ayarlar olduğu gibi korunacak mı? Hayır... Düzenlediğimiz ayarların geçici değil sürekli olmasını sağlamak için yapılandırma dosyasını Switch üzerinde bulunun NV-Ram'e kaydetmek gerekir. Hadi gelin bunu yapalım. \n\nPrivileged moda geçtikten sonra <code>copy running-config startup-config</code> komutunu kullanırız. Burada geçen iki argümanı açıklamak gerekirse;\n\n- running-config ⇒ Rastgele Erişimli Bellekte (RAM) saklanır. Geçerli yapılandırmayı yansıtır. Çalışan bir yapılandırma değiştirildiğinde Cisco cihazının çalışması derhal etkilenir. RAM uçucu hafızadır. Cihaz kapatıldığında veya yeniden başlatıldığında tüm içeriğini kaybeder. \n- startup-config . ⇒  NVRAM'de depolanan kaydedilmiş yapılandırma dosyasıdır. Cihazın açılışta veya yeniden başlatma sırasında kullanacağı tüm komutları içerir. Flash, cihaz kapatıldığında içeriğini kaybetmez.\n\n```\nSw-Floor-1# show running-config\n```\nSon olarak başlangıç yapılandırmasına istenmeyen değişikler kaydedildiyse yine privileged moda geçerek <code>erase startup-config</code> komutunu kullanarak NV-Ram'de yer alan yapılandırma dosyasını silebiliriz. Cihaz yeniden başladığında varsayılan yapılandırma dosyası ile birlikte tekrar açılacaktır. \n\nSonraki makalelerde görüşmek üzere hoşçakalın...\n",
    "categories": [
      "Switch & Router"
    ],
    "slug": "temel-switch-yapilandirmasi",
    "ID": "6849cc65-360b-46ca-afa0-006f3ee0dd81",
    "cover": "cover1.jpg",
    "date": "2022-06-09 12:00",
    "createdAt": 1654728343247,
    "updatedAt": 1654900801500
  },
  {
    "ID": "5094ab95-478f-4baa-845e-88a1112c34bd",
    "description": "OSI referans modelini ve TCP/IP protokol modelini öğrendik ama bunları bilmek, bir ağ üzerinden hareket eden verilerin nasıl kapsüllendiğini öğrendiğinizde kullanışlı olacaktır. Bu makaledeki amacımız verilerin ağ içindeki serüvenine ortak olmak. ",
    "categories": [
      "network"
    ],
    "title": "Ağ İçinde Veri İletimi",
    "slug": "ag-icinde-veri-iletimi",
    "tags": [
      "pdu",
      "data-transmission"
    ],
    "content": "OSI referans modelini ve TCP/IP protokol modelini öğrendik ama bunları bilmek, bir ağ üzerinden hareket eden verilerin nasıl kapsüllendiğini öğrendiğinizde kullanışlı olacaktır. Bu makaledeki amacımız verilerin ağ içindeki serüvenine ortak olmak. \n\n## Verileri Segmentleme\n\nTeorik olarak, bir video veya bir çok büyük eki olan bir e-posta mesajı gibi tek bir iletişim, bir ağ üzerinden bir kaynaktan bir hedefe devasa, kesintisiz bir bit akışı olarak gönderilebilir. Ancak bu durum, aynı iletişim kanallarını veya bağlantılarını kullanması gereken diğer aygıtlar için sorun yaratacaktır. Bu büyük veri akışları önemli gecikmelere neden olacaktı. Ayrıca, birbirine bağlı ağ altyapısında herhangi bir bağlantı iletim sırasında başarısız olursa, mesajın tamamı kaybolur ve tam olarak yeniden iletilmesi gerekir.\n\nDaha iyi bir yaklaşım, veriyi ağ üzerinden göndermek için daha küçük ve daha yönetilebilir parçalara bölmektir(böl ve fethet gibi).  Segmentasyon, bir veri akışını ağ üzerinden iletimler için daha küçük birimlere bölme işlemidir. Veri ağları TCP/IP protokol paketini kullandığından, verileri tek tek IP paketlerine gönderir ve bu nedenle segmentasyon gereklidir. Her paket, ayrı ayrı kartpostal dizisi olarak uzun bir mektup göndermeye benzer şekilde ayrı ayrı gönderilir. Aynı hedef için segmentleri içeren paketler, farklı yollar üzerinden gönderilebilir.\n\nİletilerin bölümlenerek gönderilmesinin iki temel faydası vardır:\n\n-   **Hızı artırır**  - Büyük bir veri akışı paketlere ayrıldığından, bir iletişim linki olmadan ağ üzerinden büyük miktarda veri gönderilebilir. Bu, ağda multiplexing adı verilen birçok farklı konuşmanın araya girmesini sağlar.\n-   **Verimliliği artırır**  - Ağdaki bir başarısızlık veya ağ tıkanıklığı nedeniyle tek bir segment hedefine ulaşamazsa, tüm veri akışını yeniden göndermek yerine yalnızca o segmentin yeniden iletilmesi gerekir.\n![segmentation-multiplexing](https://skorskyfiles.blob.core.windows.net/$web/articles/veri-iletimi/Segmenting-Messages.gif)\n\n## Sequencing - Sıralama\nMesajları bir ağ üzerinden iletmek için segmentasyon ve multiplexing kullanmanın zorluğu, tüm veri iletme sürecine eklenen karmaşıklık düzeyidir. 100 sayfalık bir mektup göndermeniz gerektiğini, ancak her zarfın yalnızca bir sayfa alabileceğini düşünün, 100 zarf gerekli olacaktır ve her zarfın ayrı ayrı ele alınması gerekecektir. 100 farklı zarf içindeki 100 sayfalık mektubun okunamayacak olması mümkündür. Sonuç olarak, zarftaki bilgilerin alıcının sayfaları doğru sırayla yeniden bir araya getirebilmesini sağlamak için bir sıra numarası içermesi gerekir.\n\nAğ iletişiminde, mesajın her bir bölümünün doğru hedefe ulaşmasını ve şekilde gösterildiği gibi orijinal mesajın içeriğine yeniden birleştirilmesini sağlamak için benzer bir süreçten geçmesi gerekir. TCP, tek tek segmentleri sıralamaktan sorumludur.\n![sequencing](https://skorskyfiles.blob.core.windows.net/$web/articles/veri-iletimi/sequencing.png)\n\n## Protocol Data Unit\nUygulama verileri, ağ ortamından iletilmek üzere protokol yığınından geçirildikçe, her düzeyde çeşitli protokol bilgileri eklenir. Bu işlem, kapsülleme (encapsulation) olarak bilinir.\n\n> UDP PDU, datagram olarak adlandırılsa da, IP paketleri de bazen IP datagramları olarak adlandırılır .\n\nVeri parçasının herhangi bir katmanda aldığı biçim, protocol data unit (PDU) olarak adlandırılır. Kapsülleme sırasında, birbirini takip eden her katman, kullanılan protokole göre yukarıdaki katmandan aldığı PDU'yu kapsüller. PDU, işlemin her aşamasında yeni işlevlerini yansıtmak için farklı bir ad alır. PDU'lar için evrensel bir adlandırma kuralı olmamasına rağmen, bu derste PDU'lar TCP/IP paketinin protokollerine göre adlandırılmıştır. Her veri biçimi için PDU'lar şekilde gösterilmiştir.\n\n![pdu](https://skorskyfiles.blob.core.windows.net/$web/articles/veri-iletimi/pdu.png)\n\n- **Data** ⇒ Uygulama katmanında kullanılan PDU için genel terim.\n- **Segment** ⇒ Taşıma katmanı PDU'su\n- **Packet** ⇒ Ağ katmanı PDU'su\n- **Frame** ⇒ Veri Bağlantı katmanı PDU'su\n- **Bits** ⇒ Veriyi ortam üzerinden fiziksel olarak iletirken kullanılan fiziksel katman PDU'su\n\n\n### Encapsulation\nMesajlar bir ağda gönderildiğinde, kapsülleme işlemi yukarıdan aşağıya doğru çalışır. Her katmanda, üst katman bilgisi, kapsüllenmiş protokol içindeki veriler olarak kabul edilir. Örneğin, TCP segmenti, IP paketinin içindeki veri olarak kabul edilir.\n![encapsulation](https://skorskyfiles.blob.core.windows.net/$web/articles/veri-iletimi/Encapsulation-Example.gif)\n\n### De-encapsulation\nBu işlem alıcı hostta tersine şekilde işler ve kapsül açma olarak bilinir. Kapsül açma alıcı cihaz tarafından bir veya daha fazla protokol başlığını kaldırmak için kullanılan işlemdir. Veri son kullanıcı uygulamasına doğru yığından yukarı hareket ederken kapsülleri açılır.\n![deencapsulation](https://skorskyfiles.blob.core.windows.net/$web/articles/veri-iletimi/De-encapsulation-Example.gif)\n\nVeri iletimine de göz atmış olduğumuza göre bir sonraki makalemizde artık katmanları daha derin bir şekilde inceleyebiliriz...\n\n",
    "cover": "data-transmission.png",
    "date": "2022-06-11 12:00",
    "createdAt": 1654903589661,
    "updatedAt": 1654904529641
  },
  {
    "slug": "network-e-ilk-adım",
    "tags": [
      "topology",
      "lan-wan"
    ],
    "content": "Çoook uzun sürecek bir makale serisine başlıyoruz. CCNA-1 eğitimine paralel gidecek olan makale serimiz siber güvenlik ve network security çalışmak isteyenlere ilk adım için mükemmer bir fırsat olacağına eminim. O zaman başlayalım\n\n## Network Bileşenleri\nBir ağa bağlanan ve ağ iletişimine katılan tüm bilgisayarlar, ana bilgisayarlar (host) olarak adlandırılırlar. Host'lar uç cihazlar olarak adlandırılabilir. Bazı hostlar da istemciler olarak adlandırılır. Bununla birlikte, host terimi özellikle ağ üzerinde iletişim amacıyla bir numara atanan cihazları ifade eder. Bu numara, belirli bir ağdaki hostu tanımlar. Bu numaraya Internet Protokolü (IP) adresi denir. IP adresi, hostu ve bu hostun bağlı olduğu ağı tanımlar.\n\nSunucular, ağdaki diğer uç aygıtlara e-posta veya web sayfaları gibi bilgiler sunmalarını sağlayan yazılımlara sahip bilgisayarlardır. Her hizmet ayrı sunucu yazılımı gerektirir. Örneğin, bir sunucunun ağa web hizmetleri sunabilmesi için, web sunucu yazılımı gereklidir. Sunucu yazılımına sahip bir bilgisayar birçok farklı istemciye aynı anda hizmet sağlayabilir.\n\n![host-and-server](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/host-andserver.png)\n\n### End Devices - Uç Cihazlar\nSon kullanıcıların en çok tanık olduğu cihazlardır. Kullandığımız tüm bilgisayarlar istisnalar hariç birer uç cihaz olarak adlandırılır. Bir uç cihazı diğerinden ayırmak için ağdaki her uç cihazın bir adresi vardır. Uç cihaz iletişim başlattığında, mesajın nereye gönderileceğini belirtmek için hedef uç cihazın adresini kullanır.\n\nBir uç cihaz, ağ üzerinden iletilen bir mesajın kaynağı veya hedefidir. \n### Intermediary Devices - Aracı Cihazlar\n\nAracı cihazlar, bağımsız uç cihazları ağa bağlar. Bir Internetwork oluşturmak için birden fazla ağa bağlanabilirler. Bu aracı cihazlar, bağlanabilirliği sağlar ve verilerin ağ üzerinden akmasını sağlar.\n\nAracı cihazlar mesajların ağ boyunca alacağı yolu belirlemek için ağ bağlantıları hakkındaki bilgilerle birlikte hedef uç cihazın adresini kullanır.\n![araci-cihazlar](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/araci-cihazlar.png)\nAracı ağ aygıtları bu işlevlerin bir kısmını veya tümünü gerçekleştirir:\n\n-   İletişim sinyallerini yeniden üretme ve yeniden iletme\n-   Ağ boyunca ve ağlar arasında hangi yolların bulunduğu hakkında bilgileri sağlama\n-   Hata ve iletişim arızalarını diğer cihazlara bildirime\n-   Bağlantı arızası gerçekleştiğinde veriyi alternatif yollar üzerinden yönlendirme\n-   Mesajların önceliklerine göre, mesajları sınıflandırma ve yönlendirme\n-   Güvenlik ayarlarına göre veri akışını engelleme veya izin verme\n### Network Media\nİletişim medya aracılığıyla bir ağ üzerinden iletilir. Medya, mesajın kaynaktan hedefe geçtiği kanalı sağlar.\n\nModern ağlar cihazları birbirine bağlamak için öncelikle üç tür medya kullanır:\n\n-   **Kablolardaki metal teller** ⇒ Veriler elektriksel impulslara kodlanır.\n-   **Kablolardaki cam veya plastik lifler (fiber optik kablo)** ⇒Veriler ışık darbelerine kodlanır.\n-   **Kablosuz iletim** ⇒ Veriler, elektromanyetik dalgaların spesifik frekanslarının modülasyonu yoluyla kodlanır.\n![network-media\n](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/network-media.png)\n\n## Network Topolojileri\nNetwork bileşenlerini öğrendiğimize göre artık network topolojilerine bir adım atabiliriz ancak çoook daha detaylı ayrı bir makaleye hakeden bir konu olduğu için sadece göz atacağız. Bir network kuracağımız zaman bunu tıpkı bir kağıda diyagram ya da şekil çizer gibi göstermek işimizi çok kolaylaştıracaktır. Burada asıl amaç hangi cihaz hangi cihaza bağlı, nerede ve nasıl bağlı olduğunun cevabını verebilmektir. \n\n### Network Gösterimi\nBir topoloji çizeceğiz fakat hangi şekilleri kullanarak? Gelin bunun cevabına birlikte bakalım.\n![network-gösterimi](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/agin-g%C3%B6sterimi.png)\n\nYukarıda her bir bileşeni gösterirken yaygın olarak gösterilen çizimleri verilmiştir. Tabii arada her ne kadar benzer olsa da farklılıklar meydana gelebilir.\n### Topoloji Diyagramları\n\nTopoloji diyagramları, bir ağ ile çalışan herkes için zorunlu belgelerdir. Ağın nasıl bağlandığına dair görsel bir harita sunarlar. Fiziksel ve mantıksal olmak üzere iki tür topoloji diyagramı vardır.\n\n**Fizksel Topoloji Diyagramları**\nFiziksel topoloji diyagramları, aracı cihazların fiziksel konumunu ve kablo kurulumunu gösterir. Bu cihazların bulunduğu odaların bu fiziksel topolojide etiketlendiğini görebilirsiniz.\n![fiziksel-topoloji](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/fiziksel-topoloji.png)\n\n**Mantıksal Topoloji Diyagramları**\nMantıksal topoloji diyagramları, cihazları, portları ve ağın adresleme şemasını göstermektedir. Hangi uç cihazların hangi aracı cihazlara bağlandığını ve hangi medyanın kullanıldığını görebilirsiniz.\n![mantiksal-topoloji](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/mantiksal-topoloji.png)\n## Network Türleri\n\nArtık ağları oluşturan bileşenlere ve bunların fiziksel ve mantıksal topolojilerdeki gösterimlerine aşina olduğumuza göre birçok farklı ağ türüne geçebiliriz.\n\nNetwork türleri aşağıdakilere göre büyük ölçüde değişiklik gösterir:\n\n-   Kapsanan alanın boyutu\n-   Bağlı kullanıcı sayısı\n-   Mevcut hizmetlerin sayısı ve türleri\n-   Sorumluluk alanı\n\nEn yaygın iki ağ altyapısı türü Local Area Network (LAN) ve Wide Area Network (WAN'lar) 'dir. LAN, küçük bir coğrafi bölgedeki kullanıcılara ve son cihazlara erişim sağlayan bir ağ altyapısıdır. LAN genellikle bir işletme, ev veya küçük işletme ağı içindeki bir departmanda kullanılır. WAN, genellikle daha büyük bir şirket veya telekomünikasyon servis sağlayıcısı tarafından sahip olunan ve yönetilen geniş bir coğrafi alanda diğer ağlara erişim sağlayan bir ağ altyapısıdır. \n\n### LAN ve WAN\n\n**LAN'lar**\n\nLAN, küçük bir coğrafi alana yayılan bir ağ altyapısıdır. LAN'ların belirli özellikleri vardır:\n-   LAN'lar ev, okul, ofis binası veya kampüs gibi sınırlı bir alandaki uç cihazları birbirine bağlar.\n-   LAN genellikle tek bir kuruluş veya birey tarafından yönetilir. Yönetimsel kontrol, ağ düzeyinde uygulanır, güvenlik ve erişim kontrol politikalarını yönetir.\n-   LAN'lar şekilde gösterildiği gibi dahili uç cihazlara ve ara cihazlara yüksek hızlı bant genişliği sağlar.\n\n**WAN'lar**\n\nWAN, geniş bir coğrafi alana yayılan bir ağ altyapısıdır. WAN'lar genel olarak servis sağlayıcıları (SS) veya İnternet Servis Sağlayıcıları (İSS) tarafından yönetilir.\n\nWAN'lar belirli özelliklere sahiptir:\n\n-   WAN'lar LAN'ları şehirler, eyaletler, bölgeler, ülkeler veya kıtalar arası gibi geniş coğrafi alanlarda birbirine bağlar.\n-   WAN'lar genellikle çoklu servis sağlayıcıları tarafından yönetilir.\n-   WAN'lar genel olarak LAN'lar arasında daha düşük hızlı bağlantılar sunar.\n![lan-wan](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/lan-wan.png)\n###  İnternet\nİnternet, birbirine bağlı ağların dünya çapında bir koleksiyonudur (internetworks veya kısaca internet). \n![internet](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/internet.png)\nİnternet herhangi bir şahıs veya gruba ait değildir. Bu, çeşitli altyapı boyunca etkili iletişim sağlamak, tutarlı ve yaygın olarak tanınan teknolojilerin ve standartların uygulanmasının yanı sıra birçok ağ yönetimi kurumunun işbirliğini gerektirir. İnternet protokollerinin ve süreçlerinin yapısını ve standardizasyonunu sürdürmeye yardımcı olmak için geliştirilmiş kuruluşlar vardır. Bu kuruluşlar arasında İnternet Mühendisliği Görev Gücü (IETF), Atanmış İsimler ve Sayılar için İnternet Şirketi (ICANN) ve İnternet Mimarisi Kurulu (IAB) ve diğer birçok kuruluş yer almaktadır.\n### İntranet ve Extranet\nİnternet terimine benzer iki terim daha vardır: Intranet ve Extranet\n\nIntranet, genellikle bir kuruluşa ait LAN ve WAN'ların özel bir bağlantısına atıfta bulunmak için kullanılan bir terimdir. Bir intranet, yalnızca kuruluşun üyeleri, çalışanları veya yetkilendirilmiş diğer kişiler tarafından erişilebilir olacak şekilde tasarlanmıştır. Örnek olarak bir üniversitede olduğunuzu düşünün farklı kampüslerde olsanız bile aynı network içerisinden çıkarak Internet'e çıkarsınız. Üniversite ağı Intranet örneğidir.\n\nBir kuruluş, farklı bir kuruluş için çalışan ancak kuruluşun verilerine erişmesi gereken kişilere güvenli erişim sağlamak için bir extranet kullanabilir. Extranetlerin bazı örnekleri şunlardır :\n\n-   Dış tedarikçilere ve yüklenicilere erişim sağlayan bir şirket\n-   Hastalarına randevu alabilmeleri için doktorlara rezervasyon sistemi sağlayan bir hastane\n-   İlçesindeki okullara bütçe ve personel bilgisi sağlayan yerel bir eğitim ofisi\n![intranet-extranet](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/intranet.png)",
    "categories": [
      "network"
    ],
    "description": "network'e ilk adım",
    "title": "Network'e İlk Adım",
    "ID": "d66535f8-4397-4e74-b221-2c2f9189b885",
    "cover": "network.png",
    "date": "2022-06-07 12:00",
    "createdAt": 1654939008965,
    "updatedAt": 1655198365163
  },
  {
    "categories": [
      "network"
    ],
    "title": "Data Link Katmanı",
    "tags": [
      "osi",
      "data-link-layer"
    ],
    "slug": "data-link-katmani",
    "description": "data link katmanını inceliyoruz.",
    "content": "\n## Data Link Katmanının Amacı\nOSI modeline göre Data Link Layer (2. katman) ağ verilerini fiziksel ağ için hazırlar. data link katmanı, ağ arayüz kartından (NIC) ağ arayüz kartına iletişiminden sorumludur. data linkkatmanı aşağıdakileri yapar:\n\n-   Üst katmanların medyaya erişmesini sağlar . Üst katman protokolleri cihazların hangi fiziksel bağlantı yoluyla bağlandığını bilmez, bu nedenle bağlantı medyasına göre hareket eden katman data link katmanıdır.\n-   Verilere  genellikle 3.Katman paketlerini (örn. IPv4 veya IPv6) ekler ve bunları 2.Katman frame'lerine kapsüller.\n-   Verilerin medyaya nasıl yerleştirildiğini ve alındığını kontrol eder.\n-   Ağ medyası üzerinden, uç noktalar arasında frame'leri değiş tokuş eder.\n-   Kapsüllenmiş verileri içerisine genellikle 3.Katman paketlerini alır ve bunları uygun olan üst katman protokolüne yönlendirir.\n-   Hata algılaması gerçekleştirir ve bozuk frame'leri reddeder.\n- Kısaca gelen verileri fiziksel katman için hazırlar. Giden verileri ise üst katmanlar için hazırlar.\n\nBilgisayar ağlarında düğüm, bir iletişim yolu boyunca veri alabilen, oluşturabilen, depolayabilen veya iletebilen bir aygıttır. Düğüm, dizüstü bilgisayar veya cep telefonu gibi bir uç aygıtı veya Ethernet switchi gibi bir aracı aygıt olabilir.\n\nData link katmanı olmadan, IP gibi ağ katmanı protokolleri, bir teslimat yolu boyunca var olabilecek her tür medyaya bağlanmak için hazırlık yapmak zorundadır. Ayrıca, her yeni bir ağ teknolojisi veya medyası geliştirildiğinde, IP'nin buna uyum sağlaması gerekir.\n\nAşağıdaki şekilde 3. katman olan ağ katmanından gelen veri paketine 2. katman başlığını(Ethernet hedefi ve kaynak NIC bilgisi) eklemesini görmekteyiz. Bu işlemden sonra fiziksel katman tarafından desteklenen bir biçime dönüştürerek fiziksel katmana iletir.\n\n![data-link-layer](https://skorskyfiles.blob.core.windows.net/$web/articles/data-link-layer/data-link.png)\n\n## EEE 802 LAN/MAN Data Link Alt Katmanları\n\nIEEE 802 LAN/MAN standartları Ethernet LAN'larına, kablosuz LAN'lara (WLAN), kablosuz kişisel alan ağlarına (WPAN) ve diğer yerel ve metropol alan ağlarına özgüdür. IEEE 802 LAN/MAN data link katmanı aşağıdaki iki alt katmandan oluşur:\n\n-   **Mantıksal Bağlantı Kontrolü (LLC)** \n Bu IEEE 802.2 alt katmanı üst katmanlardaki ağ yazılımı ile alt katmanlardaki aygıt donanımı arasında iletişim kurar. Frame için hangi ağ katmanı protokolünün kullanıldığını tanımlayan bilgileri frame'e yerleştirir. Bu bilgiler, IPv4 ve IPv6 gibi birden çok 3. Katman protokolünün aynı ağ arayüzünü ve medyasını kullanmasını sağlar.\n \n-   **Media Access Controller Address (MAC)** \n Bu katman bizim mac adresi diye bildiğimiz alt katmandır ve donanıma uygulanır. Encapsulation' dan sorumludur. Data link katmanı için adresleme sağlar ve bazı fiziksel katman teknolojileri ile birlikte hareket eder.\n\nMAC alt katmanı encapsulation işlemini şu şekilde yapar:\n\n-   **Frame sınırlama**  ⇒ Bir frame içindeki alanları tanımlamak için önemli sınırlayıcılar sağlar. Bu sınırlayıcı bitler, verici ve alıcı düğümler arasında senkronizasyon sağlar.\n-   **Adresleme**  ⇒ 2.Katman frame'inin aynı paylaşılan medyadaki aygıtlar arasında taşınması için kaynak ve hedef adresleme sağlar.\n-   **Hata algılama**  ⇒ İletim hatalarını algılamak için kullanılan bir artbilgi içerir.\n\nMAC alt katmanı, birden fazla cihazın paylaşılan (yarı çift yönlü) bir medya üzerinden iletişim kurmasına izin vererek medya erişim kontrolü de sağlar. Tam çift yönlü iletişim erişim kontrolü gerektirmez.\n\n## Frame\nData link katmanı, kapsüllenmiş verileri (genellikle bir IPv4 veya IPv6 paketi), başlık ve artbilgiyle birlikte frame oluşturacak şekilde kapsülleyerek, yerel medya üzerinden aktarım için hazırlar.\n\ndata link protokolü, aynı ağ içindeki NIC-NIC iletişimlerinden sorumludur.data link katmanı frame'lerini tanımlayan birçok farklı data link katmanı protokolü bulunmasına rağmen, her frame türü üç temel parçaya sahiptir:\n\n-   Başlık\n-   Veri\n-   Artbilgi\n\nDiğer kapsülleme protokollerinden farklı olarak, data link katmanı frame'inin sonuna artbilgi şeklinde bir bilgi ekler.\n## Frame Alanları\nEncapsulation, kontrol bilgilerini başlık ve artbilgiye farklı alanlardaki değerler olarak yerleştirerek kesintisiz yayını çözülebilir gruplara ayırır. Bu format, fiziksel sinyallere düğümler tarafından tanınan ve hedefte paketler halinde kodu çözülen bir yapı verir.\n\nGenel frame alanları şekilde gösterilmiştir. Tüm protokoller bu alanların tümünü içermez. Belirli bir data link protokolüne yönelik standartlar gerçek frame biçimini belirler.\n![frame-alanlari](https://skorskyfiles.blob.core.windows.net/$web/articles/data-link-layer/frame-alanlari.png)\n\n-   **Frame start and stop indicator flags**  ⇒ Frame'in başlangıç ve bitiş sınırlarını tanımlamak için kullanılır.\n-   **Addressing** ⇒ Medyadaki kaynak ve hedef düğümleri gösterir.\n-   **Type**  ⇒ Veri alanındaki 3.Katman protokolünü tanımlar.\n-   **Control**  ⇒ Hizmet kalitesi gibi (QoS) özel akış kontrolü hizmetlerini tanımlar. QoS, belirli ileti türlerine iletme önceliği verir. Örneğin, IP üzerinden ses (VoIP) çerçevleri normalde egecikmeye duyarlı oldukları için öncelik alır.\n-   **Data**  ⇒ Frame yükünü (yani paket başlığı, segment başlığı ve veri) içerir.\n-   **Error Detection**  ⇒ Artbilgi oluşturmak için verilerden sonra dahil edilir.\n\n### Özetle\n\nData link katmanı protokolleri her frame'in sonuna artbilgi ekler. Hata algılama adı verilen işlemde artbilgi, frame'in hatasız olup olmadığını belirler. Frame'i oluşturan bitlerin mantıksal veya matematiksel bir özetinin Frame'e yerleştirilmesiyle gerçekleştirilir. Medyadaki sinyaller temsil ettikleri bit değerlerini önemli ölçüde değiştirecek parazit, bozulma ve kayıplara maruz kalabileceği için, data link katmanı hata algılamayı ekler.\n\nİletimde bir düğüm, döngüsel yedekleme kontrolü (CRC) değeri olarak bilinen frame içeriğinin mantıksal özetini oluşturur. Bu değer, frame içeriğini temsil etmek için frame kontrol sırası (FCS) alanına yerleştirilir. Ethernet artbilgisinde, FCS, frame'in iletim hatalarıyla karşılaşıp karşılaşmadığını belirlemek için alıcı düğüm için bir yöntem sağlar.\n\n## 2. Katman Adresleri\nData link katmanı, bir frame'i paylaşılan bir yerel medyaya taşımak için kullanılan adreslemeyi sağlar. Bu katmandaki cihaz adresleri fiziksel adres olarak anılır. Data link katmanı adreslemesi frame başlığında bulunur ve yerel ağdaki frame hedef düğümünü belirtir. Genellikle frame'in başlangıcıdır, bu nedenle NIC, frame'in geri kalanını kabul etmeden önce kendi 2.Katman adresiyle eşleşip eşleşmediğini hızlıca belirleyebilir. Frame başlığı frame'in kaynak adresini de içerebilir.\n\nFiziksel adresler, hiyerarşik olan 3.Katman mantıksal adreslerinden farklı olarak cihazın hangi ağda bulunduğunu göstermez. Aksine, fiziksel adres belirli cihaza özeldir. Bir aygıt, başka bir ağa veya alt ağa taşınsa bile, aynı 2.Katman fiziksel adresiyle çalışmaya devam eder. Bu nedenle, 2.Katman adresleri yalnızca aynı paylaşılan medya içindeki aygıtları aynı IP ağına bağlamak için kullanılır.\n\nIP paketi hosttan routera, routerdan routera ve son olarak routerdan hosta geçerken, IP paketinin yeni bir data link frame'inde kapsüllenir. Her data link frame'i, o frame'i gönderen NIC'nin kaynak data link adresini ve frame'i alan NIC'nin hedef data link adresini içerir.\n\n- **Host - Router**\nKaynak host 3.Katman IP paketini 2.Katman frame'inde kapsüller. Frame başlığında, host 2.Katman adresini kaynak olarak ve R1 için 2.Katman adresini hedef olarak ekler.\n![host-router](https://skorskyfiles.blob.core.windows.net/$web/articles/data-link-layer/host-router.png)\n- **Router- Router**\nR1, 3.Katman IP paketini yeni bir 2.Katman çerçevesinde kapsüller. Çerçeve başlığında R1, 2.Katman adresini kaynak olarak ve R2 için 2.Katman adresini hedef olarak ekler.\n![router-router](https://skorskyfiles.blob.core.windows.net/$web/articles/data-link-layer/router-router.png)\n-  **Router- Host**\nR2, 3.Katman IP paketini yeni bir 2.Katman çerçevesinde kapsüller. Çerçeve başlığında R2, 2.Katman adresini kaynak olarak ve sunucu için 2.Katman adresini hedef olarak ekler.\n![router-host](https://skorskyfiles.blob.core.windows.net/$web/articles/data-link-layer/router-host.png)\n\nVeri bağlantısı katmanı adresi yalnızca LAN içinde geçerlidir. Bu katmandaki adreslerin LAN dışında bir anlamı yoktur. Verilerin başka bir ağ segmentine geçmesi gerekiyorsa, router gibi bir aracı gerekir. Router, fiziksel adrese göre frame'i kabul etmeli ve IP adresi olan hiyerarşik adresi incelemek için frame kapsülünü açmalıdır. IP adresini kullanarak router, hedef cihazın ağ konumunu ve bu adrese ulaşmak için en iyi yolu belirleyebilir. Paketin nereye iletileceğini bildiğinde, router paket için yeni bir frame oluşturur ve yeni frame son hedefine doğru bir sonraki ağ segmentine gönderilir.\n\nArtık Data link katmanı hakkında çok daha fazla bilgi edindik. Network katmanına geçmek için sonraki makalelerde geçebiliriz ama önce network topolojilerini daha detaylı inceleyeceğiz. Bir sonraki makalede görüşmek üzere....",
    "ID": "0fc4ee6c-0c02-4817-870c-3c571bd9652c",
    "cover": "Data-Link-Layer.jpg",
    "date": "2022-06-12 12:00",
    "createdAt": 1654983046596,
    "updatedAt": 1654983415568
  },
  {
    "tags": [
      "topology",
      "osi"
    ],
    "description": "Topoloji diyagramları",
    "title": "Topoloji Diyagramları",
    "ID": "b08cf121-a883-424d-816c-12f661405026",
    "content": "Topoloji diyagramlarına daha önceki [Network'e ilk Adım](https://skorskyblog.me/network/tr/network-e-ilk-ad%C4%B1m#topoloji-diyagramlar%C4%B1)\nmakalemizde değinmiştik ancak artık OSI katmanlarına devam etmeden önce topoloji diyagramlarına daha detaylı bakmamız gerekiyor. Kısa bir hatırlatma yaparak başlayalım. Topoloji diyagramlarını iki gruba ayırmıştık;\n\n**Fizksel Topoloji Diyagramları**\nFiziksel topoloji diyagramları, aracı cihazların fiziksel konumunu ve kablo kurulumunu gösterir. Bu cihazların bulunduğu odaların bu fiziksel topolojide etiketlendiğini görebilirsiniz.\n![fiziksel-topoloji](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/fiziksel-topoloji.png)\n**Mantıksal Topoloji Diyagramları**\nMantıksal topoloji diyagramları, cihazları, portları ve ağın adresleme şemasını göstermektedir. Hangi uç cihazların hangi aracı cihazlara bağlandığını ve hangi medyanın kullanıldığını görebilirsiniz.\n![mantiksal-topoloji](https://skorskyfiles.blob.core.windows.net/$web/articles/gunumuzde-network/mantiksal-topoloji.png)\n\n \n## LAN Topolojileri\n\n### Mesh – Örgü Ağ Topolojisi\n\nÖrgü ağ topolojisinde her cihaz, özel bir noktadan noktaya bağlantı aracılığıyla ağdaki diğer tüm cihazlara bağlanır. Adanmış/dedicated dediğimiz bu topolojide, bağlantının yalnızca iki bağlı cihaz için veri taşıdığı anlamına gelir. Diyelim ki ağda n tane cihazımız olsun, o zaman her cihaz ağdaki (n-1) cihazlara bağlanmalıdır. N cihazlık bir örgü topolojisindeki bağlantı sayısı n (n-1) / 2 olacaktır.\n\n **Mesh – Örgü topolojisinin avantajları**\n\n-  İki cihaz arasında özel bir bağlantı olduğundan veri trafiği sorunu yoktur, bu da bağlantının yalnızca bu iki cihaz için mevcut olduğu anlamına gelir. Bu yüzden bu bağlantı güvenlidir.\n- . Mesh topolojisi güvenilir ve sağlamdır. Çünkü bir bağlantının başarısızlığı diğer bağlantıları ve ağdaki diğer cihazlar arasındaki iletişimi asla etkilemez.\n-  Mesh topolojisi güvenlidir çünkü noktadan noktaya bir bağlantı vardır ve bu nedenle yetkisiz erişim hiç bir zaman mümkün değildir.\n- Arıza tespiti bu topololijide oldukça kolaydır.\n\n **Mesh – Örgü topolojisinin dezavantajları**\n\n-  Topolojiyi oluşturmak ve bağlanmak için gereken kablo miktarı çok sıkıcı bir hal alabilir.\n-  Her aygıtın diğer aygıtlara bağlanması gerektiğinden, gereken Giriş / Çıkış bağlantı noktası sayısı çok büyük olmaktadır.\n- Ölçeklenebilme sorunu vardır. Çünkü ağ üzerindeki her bir cihaz özel noktadan noktaya bağlantıya sahiptir. Bu yüzden aynı anda çok sayıda cihaza veri göndermek mümkün değildir.\n\n### Star – Yıldız Ağ Topolojisi\n\nYıldız – Star topolojisinde, ağdaki her cihaz hub adı verilen merkezi bir cihaza bağlanır. Ağ topolojileri bakımından, Mesh topolojisinin aksine, yıldız topolojisi cihazlar arasında doğrudan iletişime izin vermez, bir cihazın hub aracılığıyla iletişim kurması gerekir. Bir cihaz diğer cihaza veri göndermek isterse, önce verileri hub’a göndermesi ve ardından hub bu verileri belirlenen cihaza iletmesi gerekir.\n\n **Yıldız topolojisinin avantajları**\n\n-  Daha ucuzdur, çünkü her aygıt yalnızca bir Giriş / Çıkış bağlantı noktasına ihtiyaç duyar ve bir bağlantıyla hub’a bağlanması gerekir.\n-  Kurulumu daha kolaydır\n-  Her aygıtın yalnızca hub’a bağlanması gerektiğinden daha az kablo gereksinimi duyar.\n- Sağlamdır, eğer bir bağlantı başarısız olursa, diğer bağlantılar çalışmaya devam edecektir.\n-  Bağlantı kolayca tanımlanabildiği için, hata tespiti kolaydır.\n\n **Yıldız topolojisinin dezavantajları**\n\n-  Hub bozulursa, ağ sistemi çöker, cihazların hiçbiri hub olmadan veri alış verişi yapamaz.\n-  Hub, yıldız topolojisinin merkezi sistemidir bu yüzden daha fazla kaynak ve düzenli bakım gerektirir.\n\n### Bus – Yol Ağ Topolojisi\nBus topolojisinde bir ana kablo vardır ve tüm cihazlar bu ana kablo üzerinden bağlanır. Ayrıca merhez hattını ana kabloya bağlayan tap adı verilen bir cihaz bulunur. Tüm veriler ana kablo üzerinden iletildiği için, bir ana kablonun sahip olabileceği mesafe ve bağlanabilecek 30 adet cihaz sınırı vardır. Bu yüzden bu mesafe ince koaksiyel kablo kullanıldığında 300, kalın koaksiyel kablo kullanıldığında ise 185 metredir.\n\n**Bus topolojisinin avantajları**\n\n-  Kolay kurulumu vardır, her kablonun omurga kablosuyla birleştirilmesi gerekir.\n-  Mesh ve star topolojisine göre daha az kablo gerektirir.\n    \n\n **Veri yolu topolojisinin dezavantajları**\n\n-  Arıza tespiti zordur.\n-  Omurga kablosuyla bağlayabileceğiniz cihaz sayısı sınırlı olduğu için ölçeklendirilemez.\n\n### Halka – Ring Ağ Topolojisi\nBu topolojide her cihaz, her iki tarafındaki iki cihaza bağlanır. Bir cihazın her iki tarafındaki cihazlarla sahip olduğu iki noktadan noktaya bağlantısı bulunmaktadır. Ayrıca bu yapı bir halka oluşturur, bu nedenle halka topolojisi olarak adlandırılmıştır. Bundan dolayı bir cihaz başka bir cihaza veri göndermek isterse, verileri bir yönde gönderir. Bu yüzden halka topolojisindeki her cihaz bir tekrarlayıcıya sahiptir. Eğer alınan veriler başka bir cihaza yönelikse, tekrarlayıcı bu verileri amaçlanan cihaz alana kadar iletir.\n\n**Halka Topolojisinin Avantajları**\n\n-  Kurulumu kolaydır.\n-  Topolojiye bir cihaz eklemek veya çıkarmak için yönetim daha kolaydır, sadece iki bağlantının değiştirilmesi yeterlidir.\n    \n\n **Halka Topolojisinin Dezavantajları**\n\n-  Bir bağlantı hatası, başarısızlık nedeniyle sinyal ileri gitmeyeceğinden tüm ağ düşebilir.\n-  Tüm veriler bir çember içinde dolaştığı için veri trafiği sorunu oluşur.\n\n### Hibrit Ağ Topolojisi\n\nİki veya daha fazla topolojinin bir kombinasyonu, hibrit topoloji olarak bilinir. Örneğin, yıldız ve ağ topolojisi kullandığımız bir sistem olduğunu varsayalım. Böylece bu kombinasyona hibrit topoloji diyebiliriz.\n\n **Hibrit topolojinin avantajları**\n\n-  Gereksinime göre topolojiyi seçebiliriz.\n-  Diğer bilgisayar ağlarını farklı topolojilere sahip mevcut ağlara bağlayabiliriz. Böylelikle, ölçeklenebilir bir ağ sistemi elde ederiz.\n    \n\n **Hibrit topolojinin dezavantajları**\n\n-  Arıza tespiti çok zordur.\n-  Kurulum zor ve karmaşıktır.\n-  Tasarımı karmaşıktır, bu nedenle bakımı zordur ve dolayısıyla pahalıdır.\n\n\n![topologies](https://skorskyfiles.blob.core.windows.net/$web/articles/topolojiler/topologies.png)\n\n\n## WAN Topolojileri\n\n-  **Point to Point**\nBu en basit ve en yaygın WAN topolojisidir. İki uç nokta arasında kalıcı bir bağlantıdan oluşur.\n\nBir kaynak ve hedef düğüm, birden çok aracı cihaz kullanılarak dolaylı olarak bir coğrafi mesafe boyunca birbirine bağlanabilir. Ancak, ağda fiziksel cihazların kullanımı, şekilde gösterildiği gibi mantıksal topolojiyi etkilemez. Şekilde, ara fiziksel bağlantıların eklenmesi mantıksal topolojiyi değiştirmeyebilir. Mantıksal noktadan noktaya bağlantı aynıdır.\n![noktadan-noktaya](https://skorskyfiles.blob.core.windows.net/$web/articles/topolojiler/noktadan-noktaya.png)\n- **Hub and Spoke**\nMerkezi yerleşkenin noktadan noktaya bağlantıları kullanarak şube tesislerini birbirine bağladığı yıldız topolojisi WAN sürümüdür. Şube siteleri merkezi siteden geçmeden diğer şube siteleriyle veri alışverişi yapamaz.\n![hub-and-spoke](https://skorskyfiles.blob.core.windows.net/$web/articles/topolojiler/hub-and-spoke.png)\n- **Mesh - Örgü**\nBu topoloji yüksek kullanılabilirlik sağlar, ancak her uç sistemin diğer tüm sistemlerle birbirine bağlanmasını gerektirir. Dolayısıyla yönetimsel ve fiziksel maliyetler yüksek olabilir. Her bağlantı temelde diğer düğüme noktadan noktaya bağlantıdır.\n![mesh](https://skorskyfiles.blob.core.windows.net/$web/articles/topolojiler/mesh.png)\n> Hibrit, herhangi bir topolojinin bir varyasyonu veya kombinasyonudur. Örneğin, kısmi bir mesh, bazılarının, ancak hepsinin değil, uç aygıtlarının birbirine bağlı olduğu bir karma topolojidir.\n## Half and Full-Duplex İletişim\nLAN topolojilerini anlatırken dubleks iletişimi anlamak önemlidir, çünkü iki cihaz arasındaki veri iletiminin yönünü ifade eder. İki yaygın dubleks modu vardır.\n\n**Half-duplex communication**\n\nBirbirine bağlanmış iki cihaz veri iletimi yaparken aynı anda hem veri gönderip hem veri alamaz. Sadece tek yönlü iletişim vardır. Veri göndermek için önce gelen verinin sonlanmasını beklemek zorundadır. . Ethernet hub'lu WLAN'lar ve eski veri yolu topolojileri tek yönlü modu kullanır. Tek Yönlü, paylaşılan medyada tek bir aygıtın aynı anda göndermesine veya almasına izin verir. \n\n**Full-duplex communication**\n\nBirbirine bağlanmış iki cihaz veri iletimi yaparken aynı anda hem veri gönderip hem veri alabilir. Çift yönlü iletişim vardır. Ethernet Switch'leri varsayılan olarak tam çift yönlü modda çalışır, ancak Ethernet hub'ı gibi bir aygıta bağlandığında tek yönlü olarak çalışabilirler.\n![half-and-full-duplex](https://skorskyfiles.blob.core.windows.net/$web/articles/topolojiler/half_full_duplex.png)\n\nArtık topolojileri biliyoruz sıra Ağ katmanında. Bir sonraki makalede görüşmek üzere",
    "categories": [
      "network"
    ],
    "slug": "topology-diyagramları",
    "cover": "topologies.png",
    "date": "2022-06-13 12:00",
    "createdAt": 1655159511772,
    "updatedAt": 1655198286575
  },
  {
    "title": "Network Layer",
    "content": "## Ağ Katmanı Özellikleri\nAğ katmanı veya OSI 'nin 3.Katmanı, uç cihazların ağlar arasında veri alışverişini sağlayan hizmetler sunar. Ağ katmanı temel protokollerini IP versiyon 4 (IPv4) ve IP versiyon 6 (IPv6) oluşturmaktadır.  Diğer ağ katmanı protokolleri arasında Open Shortest Path First (OSPF) gibi yönlendirme protokolleri ve Internet Control Message Protocol (ICMP) gibi ileti protokolleri bulunur.\n![ag-katmani](https://skorskyfiles.blob.core.windows.net/$web/articles/ag-katmani/ag-katmani.jpg)\nAğ sınırları boyunca uçtan uca iletişimi gerçekleştirmek için ağ katmanı protokolleri dört temel işlem gerçekleştirir:\n\n-   **Uç cihazların adreslenmesi** ⇒ Uç aygıtlar, ağda yer edinebilmek için benzersiz bir IP adresiyle yapılandırılmalıdır.\n\n-   **Kapsülleme-** ⇒ Ağ katmanı, taşıma katmanının protokol veri birimini (PDU) bir pakete kapsüller. Kapsülleme işlemi, kaynak (gönderen) ve hedef (alıcı) hostların IP adresleri gibi bilgileri IP başlığına ekler. Kapsülleme işlemi IP paketinin kaynağı tarafından gerçekleştirilir.\n-   **Yönlendirme** ⇒ Ağ katmanı, paketleri başka bir ağdaki bir hedef hosta yönlendirmek için hizmetler sunar. Paket, başka ağlara ulaşabilmek için router tarafından işlenmelidir. Routerların rolü, yönlendirme (routing) olarak bilinen bir işlemle en iyi yolu seçmek ve paketleri hedef hosta yönlendirmektir. Bir paket, hedef hosta ulaşmadan önce birçok routerdan geçebilir. Hedef hosta ulaşmak için bir paketin geçtiği her routera, atlama (sekme) adı verilir.\n\n-   **Kapsül açma**  ⇒Paket hedef hostun ağ katmanına vardığında, host paketin IP başlığını kontrol eder. Başlık içindeki hedef IP adresi hostun IP adresiyle eşleşiyorsa, IP başlığı paketten kaldırılır. Ağ katmanı tarafından paketin kapsülü açıldıktan sonra, ortaya çıkan 4.Katman PDU'su taşıma katmanındaki uygun hizmete aktarılır. Kaspül açma işlemi, IP paketinin hedefi olan host tarafından gerçekleştirilir.\n\nHer bir host üzerinde çalışan işlemler arasındaki veri taşımasını yöneten taşıma katmanının (OSI 4.Katman) aksine, ağ katmanı iletişim protokolleri (örn., IPv4 ve IPv6) veriyi bir hosttan diğerine taşımak için kullanılan paket yapısını ve işlemleri belirler. Her bir pakette taşınan veriyi dikkate almadan çalışma, ağ katmanına birden çok host arasındaki birden çok türde iletişim için paket taşıma olanağı sağlar.\n![ip-gif](https://skorskyfiles.blob.core.windows.net/$web/articles/ag-katmani/The-Network-Layer.gif)\n\n## IP Kapsülleme\nIP, bir IP başlığı ekleyerek taşıma katmanını segmentini veya diğer verileri kapsüller. IP başlığı, paketi hedef hosta teslim etmek için kullanılır.\n![ip-kapsullleme](https://skorskyfiles.blob.core.windows.net/$web/articles/ag-katmani/ip-kapsulleme.jpg)\nVeri katmanını katman katman kapsülleme işlemi, farklı katmanlardaki hizmetlerin diğer katmanları etkilemeden geliştirilmesini ve ölçeklenmesini sağlar. Bu, taşıma katmanı segmentlerinin IPv4 , IPv6 veya gelecekte geliştirilebilecek herhangi bir yeni protokol ile kolayca paketlenebileceği anlamına gelir.\n\nIP başlığı, bir ağ üzerinden hedefine doğru ilerledikçe 3.Katman aygıtları (yani Routerlar ve 3.Katman switchler) tarafından incelenir. IP adresleme bilgisinin, IPv4 için Ağ Adresi Çevirisi (NAT) gerçekleştiren cihaz tarafından çevrilmesi haricinde, paketin kaynak hosttan ayrıldığı andan hedef hosta ulaşana kadar aynı kaldığını unutmamak önemlidir.\n\nRouterlar, paketleri ağlar arasında yönlendirmek için yönlendirme protokollerini uygular. Bu aracı aygıtlar tarafından gerçekleştirilen yönlendirme, paket başlığındaki ağ katmanı adreslemesini inceler. Her durumda, paketin veri bölümü, yani kapsüllenmiş taşıma katmanı PDU'su veya diğer veriler, ağ katmanı işlemleri sırasında değişmeden kalır.\n\n## Uç Cihazların Paketleri Yönlendirmesi\nHem IPv4 hem de IPv6 ile paketler her zaman kaynak hostta oluşturulur. Kaynak hostun, paketi hedef hosta yönlendirebilmesi gerekir. Bunu yapmak için, host uç aygıtları kendi yönlendirme tablosunu oluşturur. Bu konuda, uç aygıtların yönlendirme tablolarını nasıl kullandığı anlatılmaktadır.\n\nAğ katmanının diğer bir rolü, paketleri hostlar arasında yönlendirmektir. Host aşağıdakilere bir paket gönderebilir:\n\n-   **Kendisi**  ⇒ Bir host, 127.0.0.1 özel IPv4 adresine ya da ::1 IPv6 kendisine ping atabilir :( loopback arayüzü olarak adlandırılır.) Loopback arayüzü pinglendiğinde hosttaki TCP / IP protokol yığını test edilir.\n-   **Yerel host**  ⇒ Gönderen hostla aynı yerel ağdaki kaynak hosttur. Kaynak ve hedef host aynı ağ adresini paylaşır.\n-   **Uzak host**  ⇒  Bu, uzak ağdaki bir hedef hosttur. Kaynak ve hedef host aynı ağ adresini paylaşmazlar.\n![yonlendirme](https://skorskyfiles.blob.core.windows.net/$web/articles/ag-katmani/yonlendirme.jpg)\nBir paketin yerel bir hosta mı yoksa uzak bir hosta mı gönderileceği, kaynak uç cihaz tarafından belirlenir. Kaynak uç cihaz, hedef IP adresinin kendisi ile aynı ağda olup olmadığını belirler. Belirleme yöntemi IP sürümüne göre değişir:\n\n-   **IPv4'te**  ⇒ Kaynak aygıt, bunu belirlemek için kendi IPv4 adresi ve hedef IPv4 adresi ile birlikte kendi alt ağ maskesini kullanır.\n-   **IPv6'da**  ⇒ Yerel router, yerel ağ adresini (önek) ağdaki tüm cihazlara bildirir.\n\nBir ev veya iş ağında, LAN switchi veya kablosuz erişim noktası (WAP) gibi bir aracı kullanarak birbirine bağlı birkaç kablolu ve kablosuz cihazınız olabilir. Bu ara cihaz yerel ağdaki yerel hostlar arasında ara bağlantı sağlar. Yerel ana hostlar, herhangi bir ek cihaza ihtiyaç duymadan birbirlerine ulaşabilir ve bilgi paylaşabilir. Host, kendisiyle aynı IP ağı ile yapılandırılmış bir cihaza paket gönderiyorsa, paket basitçe host arayüzünden dışarı gönderilerek, ara cihaz üzerinden ve doğrudan hedef aygıta iletilir.\n\nElbette, çoğu durumda cihazlarımızın, diğer evler, işletmeler ve internet gibi yerel ağ segmentinin ötesine bağlanmasını isteriz. Yerel ağ segmentinin ötesindeki cihazlar uzak hostlar olarak bilinir. Bir kaynak cihaz, uzak bir hedef cihaza bir paket gönderdiğinde, routerların ve yönlendirmenin yardımına ihtiyaç duyulur. Yönlendirme, hedefe giden en iyi yolu belirleme işlemidir. Yerel ağ segmentine bağlı router, varsayılan ağ geçidi olarak anılır.\n\nBir sonraki makalemizde burada sıkça bahsettiğimiz IPv4 ve IPv6 neymiş daha detaylı inceleyebiliriz. Görüşmek üzere...",
    "categories": [
      "network"
    ],
    "description": "Ağ Katmanı",
    "slug": "ag-katmani",
    "tags": [
      "osi",
      "network-layer"
    ],
    "ID": "9835da93-deb7-4a31-b02e-7248355ec6ac",
    "cover": "network-layer.png",
    "date": "2022-06-20 12:00",
    "createdAt": 1655739041908,
    "updatedAt": 1656428160290
  }
]